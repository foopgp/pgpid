#!/bin/bash
#
# Copyright Â© 2021-2022 by Friends Of OpenPGP organization <info@foopgp.org>.
#          All Right Reserved
#
# Scan QRcodes containing parts of OpenPGP secrets from IMAGES or webcam,
# and import this secrets into a factory reseted OpenPGP secured device (eg yubikey).
#


if [[ "$1" == --bash-completion ]] ; then
	_pgpi_completion()
	{
		local cur prev options
		local IFS=$'\n'

		COMPREPLY=()
		cur=${COMP_WORDS[COMP_CWORD]}

		if [[ "$cur" == -* ]]; then
			options="--shred --verbose --quiet --help --version"

			COMPREPLY=( $(IFS=" " compgen -W "$options" -- $cur ) )
		else
			prev=${COMP_WORDS[COMP_CWORD-1]}
			case $prev in
				-o|--output-path)
					COMPREPLY=( $(compgen  -d -- $cur ) )
					return ;;
				# some options will exit without executing any actions, so don't complete anything
				-h|--help|-V|--version)
					return ;;
			esac

			COMPREPLY=( $(compgen -o plusdirs -f -X '!*.@(gif|GIF|jp?(e)g|JP?(E)G|miff|tif?(f)|pn[gm]|PN[GM]|p[bgp]m|bmp|BMP|xpm|ico|xwd|tga|pcx)' -- $cur ) )
		fi
	}
	complete -o filenames -F _pgpi_completion "$BASH_SOURCE"
	return 0
fi

PGPI_NAME="$(basename $(readlink -f "$BASH_SOURCE") )"
PGPI_VERSION="0.0.1"

### Default option values ###

unset max pgpi_qrversion

if [[ "$BASH_SOURCE" == "$0" ]] ; then
	# run as a program
	set -e
	_exit="exit"
	LOGEXITPRIO=crit
	LOGLEVEL=5

	PGPI_OUTPATH="$PWD"

	usage="Usage: $BASH_SOURCE [OPTIONS]... [--] [IMAGES]...
$PGPI_NAME scan QRcodes containing parts of OpenPGP secrets from IMAGES or webcam,
and import this secrets into a factory reseted OpenPGP secured device (eg yubikey)."

	soptions="
    -s, --shred              also shred IMAGES if secrets are successfully imported to OpenPGP secured device.
    -v, --verbose            increase log verbosity: ...<notice[5]<info[6]<debug[7]  (current: $LOGLEVEL)
    -q, --quiet              decrease log verbosity: ...<err[3]<warning[4]<notice[5]<...  (current: $LOGLEVEL)
    -h, --help               show this help and exit
    -V, --version            show version and exit"
else
	# run as a library (source $0)
	_exit="true"
	LOGEXITPRIO=emerg
	LOGLEVEL=6

	usage="Usage: source $BASH_SOURCE [OPTIONS]..."

	soptions="
        --bash-completion    set completion for $BASH_SOURCE program and return (without loading anything else)
    -l, --log-level LEVEL    log level: emerg<1=alert<crit<3=err<warning<5=notice<info<7=debug (current: $LOGLEVEL)
    -L, --log-exit PRIORITY  log exit priority: emerg|alert|crit|err|warning|... (current: $LOGEXITPRIO )
    -h, --help               show this help
    -V, --version            show version"
fi

### Handling options ###

helpmsg="$usage

Options: $soptions
"

for ((i=0;$#;)) ; do
case "$1" in
	-o|--output*) shift ; PGPI_OUTPATH="$1" ; ( cd "$PGPI_OUTPATH" && touch . ) ;;
	-l|--log-l*) shift ; LOGLEVEL="$1" ; [[ "$LOGLEVEL" == [0-9] ]] || { echo -e "Error: log-level out of range [0-7]" >&2 ; $_exit 2 ; } ;;
	-L|--log-e*) shift ; LOGEXITPRIO="$1"
		grep -q "\<$LOGEXITPRIO\>" <<<${!loglevels[@]} || { echo -e "Error: log-exit \"$LOGEXITPRIO\" is none of: ${!loglevels[@]}" >&2 ; $_exit 2 ; } ;;
	-v|--verb*) ((LOGLEVEL++)) ;;
	-q|--quiet) ((LOGLEVEL--)) ;;
	-h|--h*) echo "$helpmsg" ; $_exit ;;
	-V|--vers*) echo "$PGPI_NAME $PGPI_VERSION" ; $_exit ;;
	--) shift ; break ;;
	-*) echo -e "Error: Unrecognized option $1\n$helpmsg" >&2 ; $_exit 2 ;;
	*) break ;;
esac
shift
done


### functions ###

. "$(dirname "$BASH_SOURCE")"/bl-log --no-act --log-level "$LOGLEVEL" --log-exit "$LOGEXITPRIO"
. "$(dirname "$BASH_SOURCE")"/bl-interactive --
. "$(dirname "$BASH_SOURCE")"/bl-security --

# Do nothing else if sourced
[[ "$BASH_SOURCE" == "$0" ]] || return 0


### Init ###

_pgpid_qrscan_onexit() {
	[[ -d "$TMPDIR" ]] && bl_shred_path -v -f -r "$TMPDIR" 2> >(bl_log warning) | bl_log debug
}

TMPDIR=$(mktemp -d -t "$PGPI_NAME".XXXXXX) || log crit "crit: Can not create a safe temporary directory."

trap _pgpid_qrscan_onexit EXIT

mkdir -p "$TMPDIR/gnupg"
chmod -R go-rwx "$TMPDIR"

### Run ###

touch "$TMPDIR/qrcontent"
for file in "$@" ; do
	if file "$file" 2> >(bl_log crit) | grep "PDF document" > >(bl_log info) ; then
		imgfile="$TMPDIR/imgfile$((i++)).png"
		convert pdf:"$file" +append "${imgfile}" 2> >(bl_log error)
	else
		imgfile="$file"
	fi
	if zbarimg --quiet -Sdisable -Sqrcode.enable "$imgfile" 2> >(bl_log warning) | tr -d '\n' | sed 's,QR-Code:,\n,g' | grep "^~[1-9]" >> "$TMPDIR/qrcontent" ; then
		bl_log info "QR code(s) with expected data succefully extracted from $file"
	else
		bl_log error "No QR code with expected data in $file"
	fi
done

# Expected QRdata begin with "~[1-9]" followed by the maximum number of part-1 (default: 4-1=3) then by the index of the part (O to 9).
while read -r part ; do
	[[ "${part:1:1}" == "${pgpi_qrversion:=${part:1:1}}" ]] || bl_log crit "QR codes doesn't share the same version ($pgpi_qrversion != ${part:1:1})"
	[[ "${part:2:1}" == "${max:=${part:2:1}}" ]] || bl_log crit "QR codes doesn't share the same division ($max != ${part:2:1})"
	parts[${part:3:1}]="${part:4}"
done <"$TMPDIR/qrcontent"

for ((i=0;i<=${max:=3};i++)) ; do
	[[ -z "${parts[$i]}" ]] || continue

	v4ldevices=($(ls /dev/v4l/by-id/*index0)) || bl_log crit "No video input (eg. webcam) detected"
	v4ldevice=$(bl_radiolist --output-value --num-per-line 1 --default -1 --text "Missing part $((i+1)), device to scan qrcode ?" "${v4ldevices[@]}")
	v4ldevice="$(readlink -f "${v4ldevice}")"
	ffplay -loglevel warning -video_size 1024x768 -i "$v4ldevice" 2> >(bl_log warning) & sleep 5 ; kill $! 2> >(bl_log crit)
	bl_log notice "Taking picture, please don't move (2 seconds) !"
	ffmpeg -loglevel error -y -ss 00:02 -video_size 1024x768 -i "$v4ldevice" -frames:v 1 -q:v 2 "$TMPDIR/v4l.jpg" 2> >(bl_log error)
	while ! part="$(zbarimg -Sdisable -Sqrcode.enable "$TMPDIR/v4l.jpg" 2> >(bl_log debug) | tr -d '\n' | sed 's,QR-Code:,\n,g' | grep "^~[1-9]")" ; do
		bl_log notice "No QR code with expected data detected..."
		ffplay -loglevel warning -video_size 1024x768 -i "$v4ldevice" 2> >(bl_log warning) & sleep 3 ; kill $! 2> >(bl_log crit)
		bl_log notice "Taking picture, please don't move (2 seconds) !"
		ffmpeg -loglevel error -y -ss 00:02 -video_size 1024x768 -i "$v4ldevice" -frames:v 1 -q:v 2 "$TMPDIR/v4l.jpg" 2> >(bl_log error)
	done
	[[ "${part:1:1}" == "${pgpi_qrversion:=${part:1:1}}" ]] || bl_log crit "QR codes doesn't share the same version ($pgpi_qrversion != ${part:1:1})"
	[[ "${part:2:1}" == "${max:=${part:2:1}}" ]] || bl_log crit "QR codes doesn't share the same division ($max != ${part:2:1})"
	i=${part:3:1}
	parts[$i]="${part:4}"
	bl_log notice "Scanning part $((i+1)) / $((max+1)) : OK"
	i=-1
done

#echo "----" ; printf "%s" ${parts[@]} ; echo -e "\n${!parts[@]}\n"

#printf "%s" ${parts[@]} | basenc --decode --base64url | gpg --decrypt > temp.gpg

# If we are using paperkey, we have to retrieve the PGPcert (use to need network) and use something like:
# ... base64 -d | paperkey --pubring "$TMPDIR/PGPcert.gpg" 2> >(bl_log crit) | gpg --homedir "$TMPDIR/gnupg" --command-fd 0 --batch --pinentry-mode loopback --passphrase "${passphrase}" --import 2> >(bl_log notice)

birth_date=$(bl_input --default "${birth_date}" "Birth date (YYYY-mm-dd)")
passphrase="$(sed 's/[^0-9]//g' <<<"${birth_date}" )"
if [[ "$pgpi_qrversion" == "2" ]] ; then
	for ((i=1;i<=max+1;i++)) ; do
		passphrase+=" $(bl_input "Secret word $i/$((max+1))")"
	done
fi
printf "%s" ${parts[@]} | basenc --decode --base64url | gpg --decrypt --batch --pinentry-mode loopback --passphrase "${passphrase}" 2> >(bl_log notice) | gpg --homedir "$TMPDIR/gnupg" --batch --pinentry-mode loopback --passphrase "${passphrase}" --import 2> >(bl_log notice)

FPRS=($(gpg --homedir "$TMPDIR/gnupg" --list-secret-keys --with-colons 2> >(bl_log notice) | sed -n 's,^fpr:.*:\([[:xdigit:]]\{40\}\):,\1,p'))

##TODO: check gpg version, because we use some recent feature, and compatibility may change (tested with gpg (GnuPG) 2.2.27 libgcrypt 1.8.8)
#bl_log info "Generate auth key to be put in OpenPGP card..."
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --quick-add-key ${FPRS[0]} ed25519 auth 11y 2> >(bl_log notice)
#bl_log info "Generate extra signing keys..."
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --quick-add-key "${FPRS[0]}" ed25519 sign 11y 2> >(bl_log notice)
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --quick-add-key "${FPRS[0]}" ed25519 sign 11y 2> >(bl_log notice)
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --quick-add-key "${FPRS[0]}" ed25519 sign 11y 2> >(bl_log notice)
#
## updates array of fingerprints
#FPRS=($(gpg --homedir "$TMPDIR/gnupg" --list-secret-keys --with-colons 2> >(bl_log notice) | sed -n 's,^fpr:.*:\([[:xdigit:]]\{40\}\):,\1,p'))
#PGPID[frps]="$(declare -p FPRS)"
#pgpi_json_from_var --nested PGPID > "$TMPDIR/pgpid.json" 2> >(bl_log crit)
#
#bl_log info "Export OpenPGP first certificate and public ssh key..."
#gpg --homedir "$TMPDIR/gnupg" --export 2> >(bl_log crit) > "$TMPDIR/PGPcert.gpg"
#gpg --homedir "$TMPDIR/gnupg" --export-ssh-key ${FPRS[0]} 2> >(bl_log crit) > "$TMPDIR/ssh_${PGPID[udid4]}.pub"
#bl_log info "Prepare paper to backup master key, and export secret subkeys..."
#umask 0077
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --export-secret-keys ${FPRS[0]}\! 2> >(bl_log crit) | paperkey 2> >(bl_log crit) > "$TMPDIR/secret.paper.txt"
#printf "\n# Initial passphrase: ${passphrase}\n" >> "$TMPDIR/secret.paper.txt"
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --armor --export-secret-keys ${FPRS[1]}\! 2> >(bl_log crit) > "$TMPDIR/secret.E.asc"
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --armor --export-secret-keys ${FPRS[2]}\! 2> >(bl_log crit) > "$TMPDIR/secret.A.asc"
#bl_log info "export secret sub-keys to be use in thunderbird, delta chat, etc..."
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --armor --export-secret-keys ${FPRS[3]}\! 2> >(bl_log crit) > "$TMPDIR/secret.S1.asc"
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --armor --export-secret-keys ${FPRS[1]}\! ${FPRS[4]}\! 2> >(bl_log crit) > "$TMPDIR/secret.S2+E.asc"
#gpg --homedir "$TMPDIR/gnupg" --batch --passphrase "${passphrase}" --pinentry-mode loopback --armor --export-secret-keys ${FPRS[1]}\! ${FPRS[5]}\! 2> >(bl_log crit) > "$TMPDIR/secret.S3+E.asc"

# log some info
gpg --quiet --homedir "$TMPDIR/gnupg" --list-keys > >(bl_log info) 2> >(bl_log warning)

while ! gpg --homedir "$TMPDIR/gnupg" --card-status > >(bl_log info) 2> >(bl_log notice) ; do
	sleep 1
	bl_msgstop "Please plug an OpenPGP card or dongle..."
done
bl_yesno "Factory reset OpenPGP card (This will destroys all OpenPGP keys stored on the card!)" || exit 42

echo "admin
factory-reset
y
yes
quit" | gpg --homedir "$TMPDIR/gnupg" --command-fd 0 --batch --with-colons --card-edit 1> >(bl_log debug) 2>&1 || bl_log crit "Factory Reset OpenPGP card FAIL ($?)"

#TODO
echo "admin
login
udid4=TODO$udid4
name
TODO$pseudonym

quit" | gpg --homedir "$TMPDIR/gnupg" --command-fd 0 --batch --with-colons --pinentry-mode loopback --passphrase "12345678" --card-edit 1> >(bl_log debug) 2>&1 || bl_log crit "Setting OpenPGP card holder FAIL ($?)"

echo "admin
key-attr
2
1
2
1
2
1
quit" | gpg --homedir "$TMPDIR/gnupg" --command-fd 0 --batch --with-colons --pinentry-mode loopback --passphrase "12345678" --card-edit 1> >(bl_log debug) 2>&1 || bl_log crit "Setting OpenPGP card keys attributes FAIL ($?)"

#TODO WKS address calculated from email
#	echo "admin
#url
#${PGPID[pubkey_uri]}
#quit" | gpg --homedir "$TMPDIR/gnupg" --command-fd 0 --batch --with-colons --pinentry-mode loopback --passphrase "12345678" --card-edit 1> >(bl_log debug) 2>&1 || bl_log crit "Setting Pubkey URL in OpenPGP card FAIL ($?)"

bl_log notice "Unfortunately, we can't automatize moving key to card, then you should move keys master 1 and 2 manualy..."
bl_log notice "Note: password is now set to 'm' to ease this manual operation."
printf "${passphrase}\nm\n" | gpg --homedir "$TMPDIR/gnupg" --command-fd 0 --batch --pinentry-mode loopback --change-passphrase ${FPRS[0]} 1> >(bl_log notice) 2>&1 || true
gpg --homedir "$TMPDIR/gnupg" --edit-key "${FPRS[0]}" || bl_log warning "Moving OpenPGP keys to card returns $?"
#printf "m\n${passphrase}\n" | gpg --homedir "$TMPDIR/gnupg" --command-fd 0 --batch --pinentry-mode loopback --change-passphrase ${FPRS[0]} 1> >(bl_log crit) 2>&1

#declare -A OPGPCARD=()
#while IFS=':' read key value ; do
#	case "$key" in
#		[Rr]eader|version|vendor|serial)
#			OPGPCARD[${key,,}]="$value" ;;
#	esac
#done < <(gpg --homedir "$TMPDIR/gnupg" --card-status --with-colons)
#PGPID[card$i]="$(declare -p OPGPCARD)"

exit 0
